
// Model Slides
(function (global, factory) {
    global = global;
    global.g2 = global.g2 || {};
    global.g2.vehicleLineupThumbCategory = global.g2.vehicleLineupThumbCategory || {};
    global.g2.vehicleLineupThumbCategory.Component = factory();
}(this, function () { 'use strict';

    var Component = (function (isUndefined) {
        var win = window,
            $ = win.jQuery,
            Util = win.G2.util,
            RESPONSIVE = win.G2.RESPONSIVE;
        function Component (container, args) {
            if (!(this instanceof Component)) {
                return new Component(container, args);
            }
            var defParams = {
                obj : container,
                carouselInstance : null,
                carouselOpts : {
                    slidesPerView: 1,
                    slidesPerGroup: 1,
                    loop : true,
                    observer: true, // [제네시스] 차량 카테고리 개편
                    observeParents: true, // [제네시스] 차량 카테고리 개편 Start
                    breakpoints: {
                        1023: {
                            slidesPerView: 3,
                            loop : false
                        },
                        768: {
                            slidesPerView: 3,
                            loop : false
                        }
                    }
                },
                carouselWrap : '.cp-lineup-thumb-category__tab-swiper',
                carouselContainer : '.swiper-container',
                carouselWrapper : '.swiper-wrapper',
                carouselItem : '.swiper-slide',
                tabItem : '.cp-lineup-thumb-category__tab-item',
                sizeAttr : {
                    swiper : null
                },
                classAttr : {
                    hover : 'is-hover'
                },
                directionTweenOpts : {
                    tweenOpts : {
                        "SET" : {
                            "opacity" : 1
                        },
                        "SEQUENCE" : {
                            ".js-animate" : {
                                "SET" : {
                                    "x" : 198
                                },
                                "TO" : {
                                    "x" : 0
                                },
                                "DELAY" : 0.2,
                                "DURATION" : 0.8
                            }
                        }
                    }
                },
                customEvent : '.Component' + (new Date()).getTime() + Math.random()
            };
            this.opts = Util.def(defParams, (args || {}));
            if (!(this.obj = $(this.opts.obj)).length) return;
            this.init();
        }
        Component.prototype = {
            init : function () {
                this.setElements();
                this.buildCarouselCommon();
                this.buildHeightMatch();
                this.resizeFunc();
                this.bindEvents(true);
                this.buildTween();
            },
            setElements : function () {
                this.carouselWrap = this.obj.find(this.opts.carouselWrap);
                this.carouselContainer = this.carouselWrap.find(this.opts.carouselContainer);
                this.carouselWrapper = this.carouselContainer.find(this.opts.carouselWrapper);
                this.carouselPrevBtn = this.carouselContainer.find('.swiper-button-prev');
                this.carouselNextBtn = this.carouselContainer.find('.swiper-button-next');
                this.slides = this.carouselWrapper.find(this.opts.carouselItem);
                this.tabItem = this.slides.find(this.opts.tabItem);
            },
            buildHeightMatch : function () {
                Util.def(this, {
                    heightmatch : {
                        instance : [],
                        matchElements : ['.cp-lineup-thumb-category__tab-title', '.cp-lineup-thumb-category__tab-item-inner'],
                        matchCommonOpts : {
                            column : this.slides.length,
                            childElement : '>'+this.opts.carouselItem,
                            breakpoints : {
                                767 : {
                                    column : 1
                                }
                            },
                            matchAfter : $.proxy(function () {
                                this.updateHeightCarousel();
                            }, this)
                        },
                        initLayout : $.proxy(function () {
                            var _this = this;
                            for (var i = 0, max = this.heightmatch.matchElements.length; i < max; i++) {
                                (function (index) {
                                    var sTarget = _this.heightmatch.matchElements[index],
                                        sJsClass = 'js-' + sTarget.split('.')[1];
                                    for (var j = 0, jmax = _this.slides.length; j < jmax; j++) {
                                        var listTarget = _this.slides.eq(j),
                                            usedJsClass = listTarget.find('.' + sJsClass);
                                        if (!usedJsClass.length) {
                                            listTarget.find(sTarget).wrapInner('<div class="' + sJsClass + '"/>');
                                        }
                                    }
                                })(i);
                            }
                        }, this),
                        refresh : $.proxy(function () {
                            var _this = this;
                            if (this.opts.sizeAttr.swiper === 'OTHER') {
                                for (var i = 0, max = this.heightmatch.matchElements.length; i < max; i++) {
                                    (function (index) {
                                        var sTarget = _this.heightmatch.matchElements[index];
                                        for (var j = 0, jmax = _this.slides.length; j < jmax; j++) {
                                            var listTarget = _this.slides.eq(j),
                                                cTarget = listTarget.find(sTarget);
                                            if (cTarget.length) {
                                                cTarget.css('height', '');
                                            }
                                        }
                                    })(i);
                                }
                            }
                        }, this),
                        destroy : $.proxy(function () {
                            if (this.heightmatch.comOpts == null) return;
                            for (var min = 0, max = this.heightmatch.comOpts.length; min < max; min++) {
                                var matchOpt = this.heightmatch.comOpts[min];
                                matchOpt.destroy();
                            }
                        }, this),
                        build : $.proxy(function () {
                            var _this = this;
                            this.heightmatch.initLayout();
                            for (var i = 0, max = this.heightmatch.matchElements.length; i < max; i++) {
                                (function (index) {
                                    var sTarget = _this.heightmatch.matchElements[index],
                                        personOpts = {
                                            matchElement : '.js-' + sTarget.split('.')[1],
                                            pushElement : sTarget
                                        };
                                    Util.def(_this.heightmatch.matchCommonOpts, personOpts);
                                    _this.heightmatch.instance.push(new HeightMatch(_this.carouselWrapper, _this.heightmatch.matchCommonOpts));
                                })(i);
                            }
                        }, this)
                    }
                });
                this.heightmatch.build();
            },
            changeEvents : function (event) {
                var events = [],
                    eventNames = event.split(' ');
                for (var key in eventNames) {
                    events.push(eventNames[key] + this.opts.customEvent);
                }
                return events.join(' ');
            },
            bindEvents : function (type) {
                if (type) {
                    this.tabItem.on(this.changeEvents('mouseenter mouseleave focusin'), $.proxy(this.onHoverFunc, this));
                    $(win).on(this.changeEvents('resize orientationchange'), $.proxy(this.resizeFunc, this));
                } else {
                    this.tabItem.off(this.changeEvents('mouseenter'));
                    $(win).off(this.changeEvents('resize orientationchange'));
                }
            },
            onHoverFunc : function (e) {
                e.stopPropagation();
                var _target = $(e.currentTarget);
                var hoverClass = this.opts.classAttr.hover;
                if (e.type === 'mouseenter' || e.type === 'focusin') {
                    if (_target.hasClass(hoverClass)) return;
                    _target.addClass(hoverClass);
                    win.setTimeout($.proxy(function () {
                        _target.on('clickoutside touchendoutside keyupoutside', $.proxy(function () {
                            _target.trigger('mouseleave');
                        }, this));
                    }, this), 30);
                } else if (e.type === 'mouseleave') {
                    _target.off('clickoutside touchendoutside keyupoutside');
                    if (!_target.hasClass(hoverClass)) return;
                    _target.removeClass(hoverClass);
                }
            },
            resizeFunc : function () {
                this.winWidth = Util.winSize().w;
                if (this.opts.resizeStart == null) {
                    this.opts.resizeStart = this.winWidth;
                    this.resizeAnimateFunc();
                }
                win.clearTimeout(this.resizeEndTime);
                this.resizeEndTime = win.setTimeout($.proxy(this.resizeEndFunc, this), 50);
            },
            resizeEndFunc : function () {
                this.opts.resizeStart = null;
                Util.cancelAFrame.call(win, this.resizeRequestFrame);
            },
            resizeAnimateFunc : function () {
                this.setLayout();
                this.resizeRequestFrame = Util.requestAFrame.call(win, $.proxy(this.resizeAnimateFunc, this));
            },
            setLayout : function () {
                if (this.winWidth > RESPONSIVE.TABLET3.WIDTH) {
                    if (this.opts.sizeAttr.swiper !== RESPONSIVE.TABLET3.WIDTH) {
                        this.opts.sizeAttr.swiper = RESPONSIVE.TABLET3.WIDTH;
                        this.refreshCarousel();
                    }
                } else if (this.winWidth >= RESPONSIVE.MOBILE.WIDTH && this.winWidth <= RESPONSIVE.TABLET3.WIDTH) {
                    if (this.opts.sizeAttr.swiper !== RESPONSIVE.MOBILE.WIDTH) {
                        this.opts.sizeAttr.swiper = RESPONSIVE.MOBILE.WIDTH;
                        this.refreshCarousel();
                    }
                } else {
                    if (this.opts.sizeAttr.swiper !== 'OTHER') {
                        this.opts.sizeAttr.swiper = 'OTHER';
                        this.heightmatch.refresh();
                        this.refreshCarousel();
                    }
                }
            },
            buildCarouselCommon : function () {
                Util.def(this, {
                    carousel : {
                        instance : null,
                        updateAutoHeight : $.proxy(function (speed) {
                            if (this.carousel.instance == null) return;
                            this.carousel.instance.updateAutoHeight(speed);
                        }, this),
                        destroy : $.proxy(function () {
                            if (this.carousel.instance == null) return;
                            this.carousel.instance.destroy(true, true);
                            this.carousel.instance = null;
                        }, this)
                    }
                })
            },
            refreshCarousel : function () {
                var swiperSize = this.opts.sizeAttr.swiper;
                var carouselOpts = Util.def({}, this.opts.carouselOpts);
                var breakpointsOpts = carouselOpts.breakpoints;
                delete carouselOpts.breakpoints;
                if (swiperSize == 'OTHER') {
                    var customOpts = carouselOpts;
                } else {
                    var customOpts = Util.def(carouselOpts, breakpointsOpts[swiperSize]);
                }
                this.destroyCarousel();
                this.buildCarousel(customOpts);
            },
            buildCarousel : function (carouselOpts) {
                if (this.carousel.instance == null) {
                    this.carousel.instance = new HiveSwiper(this.obj, carouselOpts);
                }
            },
            destroyCarousel : function () {
                this.carousel.destroy();
            },
            updateHeightCarousel : function (speed) {
                this.carousel.updateAutoHeight(speed);
            },
            buildTween : function () {
                new DirectionTween(this.obj, this.opts.directionTweenOpts);
            },
            reInit : function (e) {
                // Global Callback
            }
        };

        return Component;
    })();
    return Component;

}));

(function (global, factory) {
    $(function () {
        factory();
    });
}(this, function () { 'use strict';

    var Component = (function (isUndefined) {
        var win = window,
            $ = win.jQuery,
            Util = win.G2.util;
        function Component (args) {
            var defParams = {
                obj : '.cp-lineup-thumb-category__tab' // [제네시스] 차량 카테고리 개편 Start
            };
            this.opts = Util.def(defParams, (args || {}));
            if (!(this.obj = $(this.opts.obj)).length) return;
            this.init();
        }
        Component.prototype = {
            init : function () {
                this.callComponent();
            },
            callComponent : function () {
                for (var i = 0, max = this.obj.length; i < max; i++) {
                    new win.g2.vehicleLineupThumbCategory.Component(this.obj.eq(i));
                }
            }
        };
        return new Component();
    })();
    return Component;

}));
// [제네시스] 차량 카테고리 개편 Start
//Select Slides(mobile)
(function (global, factory) {
    global = global;
    global.g2 = global.g2 || {};
    global.g2.vehicleLineupUio = global.g2.vehicleLineupUio || {};
    global.g2.vehicleLineupUio.Component = factory();
}(this, function () { 'use strict';

    var Component = (function (isUndefined) {
        var win = window,
            $ = win.jQuery,
            Util = win.G2.util,
            RESPONSIVE = win.G2.RESPONSIVE;
        function Component (container, args) {
            if (!(this instanceof Component)) {
                return new Component(container, args);
            }
            var defParams = {
                //slide part
                obj : container,
                carouselInstance : null,
                carouselOpts : {
                    slidesPerView: 1,
                    slidesPerGroup: 1,
                    loop : true,
                    observer: true,
                    observeParents: true,
                    breakpoints: {
                        1023: {
                            slidesPerView: 3,
                            loop : false
                        },
                        768: {
                            slidesPerView: 3,
                            loop : false
                        },
                        0: {
                            slidesPerView: 3,
                            loop : false
                        }
                    }
                },
                carouselWrap : '.cp-lineup-thumb-category__tab-swiper',
                carouselContainer : '.swiper-container',
                carouselWrapper : '.swiper-wrapper',
                carouselItem : '.swiper-slide',
                tabItem : '.cp-lineup-thumb-category__tab-item',
                selectObj : '.cp-lineup-thumb-category__select',
                carCategoryButton : '.cm-select__options > ul > li',
                swiperInstance : null,
                sizeAttr : {
                    swiper : null
                },
                classAttr : {
                    hover : 'is-hover',
                    active : 'is-active',
                    refresh : 'is-refreshed',
                    right : 'is-right',
                    selected : 'is-selected'
                },
                duration : 200,
                //uio tab part
                cmTabBtn : '.cm-thumb-tab-btn',
                cmTabBtnChild : 'ul li',
                tabBtn : '.tab-btn',
                tabLineInner : '.line-inner',
                activeClass : 'is-selected',
                rightClass : 'is-right',
                animating : false,
                currentIndex : null,
                on : {
                    complete : null
                },
                tabs : [],
                currentIdx : 0,
                //common part
                customEvent : '.Component' + (new Date()).getTime() + Math.random()
            };
            this.opts = Util.def(defParams, (args || {}));
            if (!(this.obj = $(this.opts.obj)).length) return;
            this.init();
        }
        Component.prototype = {
            init : function () {
                //slide part
                this.setElements();
                this.buildCarouselCommon();
                this.buildHeightMatch();
                this.resizeFunc();
                //uio tab part
                this.buildData();
                this.initLayout();
                //common part
                this.bindEvents(true);
                this.bindCallbackEvents();
                this.obj.data('HiveTab', this);
            },
            setElements : function () {
                //slide part
                this.carouselWrap = this.obj.find(this.opts.carouselWrap);
                this.carouselContainer = this.carouselWrap.find(this.opts.carouselContainer);
                this.carouselWrapper = this.carouselContainer.find(this.opts.carouselWrapper);
                this.carouselPrevBtn = this.carouselContainer.find('.swiper-button-prev');
                this.carouselNextBtn = this.carouselContainer.find('.swiper-button-next');
                this.slides = this.carouselWrapper.find(this.opts.carouselItem);
                this.tabItem = this.slides.find(this.opts.tabItem);
                this.selectObj = this.obj.parents('.cp-lineup-thumb-category__inner').find(this.opts.selectObj);
                this.carCategoryButton = this.selectObj.find(this.opts.carCategoryButton);
                //uio tab part
                this.cmTabBtn = this.obj.find(this.opts.cmTabBtn);
                this.cmTabUl = this.cmTabBtn.find('ul');
                this.cmTabBtnChild = this.cmTabBtn.find(this.opts.cmTabBtnChild);
                this.tabBtns = this.cmTabBtn.find(this.opts.tabBtn);
                this.cmTabContent = this.obj.find(this.opts.cmTabContent);
                this.cmTabItem = this.cmTabContent.find(this.opts.cmTabItem);
            },
            //slide part
            buildHeightMatch : function () {
                Util.def(this, {
                    heightmatch : {
                        instance : [],
                        matchElements : ['.cp-lineup-thumb-category__tab-title', '.cp-lineup-thumb-category__tab-item-inner'],
                        matchCommonOpts : {
                            column : this.slides.length,
                            childElement : '>'+this.opts.carouselItem,
                            breakpoints : {
                                767 : {
                                    column : 1
                                }
                            },
                            matchAfter : $.proxy(function () {
                                this.updateHeightCarousel();
                            }, this)
                        },
                        initLayout : $.proxy(function () {
                            var _this = this;
                            for (var i = 0, max = this.heightmatch.matchElements.length; i < max; i++) {
                                (function (index) {
                                    var sTarget = _this.heightmatch.matchElements[index],
                                        sJsClass = 'js-' + sTarget.split('.')[1];
                                    for (var j = 0, jmax = _this.slides.length; j < jmax; j++) {
                                        var listTarget = _this.slides.eq(j),
                                            usedJsClass = listTarget.find('.' + sJsClass);
                                        if (!usedJsClass.length) {
                                            listTarget.find(sTarget).wrapInner('<div class="' + sJsClass + '"/>');
                                        }
                                    }
                                })(i);
                            }
                        }, this),
                        refresh : $.proxy(function () {
                            var _this = this;
                            if (this.opts.sizeAttr.swiper === 'OTHER') {
                                for (var i = 0, max = this.heightmatch.matchElements.length; i < max; i++) {
                                    (function (index) {
                                        var sTarget = _this.heightmatch.matchElements[index];
                                        for (var j = 0, jmax = _this.slides.length; j < jmax; j++) {
                                            var listTarget = _this.slides.eq(j),
                                                cTarget = listTarget.find(sTarget);
                                            if (cTarget.length) {
                                                cTarget.css('height', '');
                                            }
                                        }
                                    })(i);
                                }
                            }
                        }, this),
                        destroy : $.proxy(function () {
                            if (this.heightmatch.comOpts == null) return;
                            for (var min = 0, max = this.heightmatch.comOpts.length; min < max; min++) {
                                var matchOpt = this.heightmatch.comOpts[min];
                                matchOpt.destroy();
                            }
                        }, this),
                        build : $.proxy(function () {
                            var _this = this;
                            this.heightmatch.initLayout();
                            for (var i = 0, max = this.heightmatch.matchElements.length; i < max; i++) {
                                (function (index) {
                                    var sTarget = _this.heightmatch.matchElements[index],
                                        personOpts = {
                                            matchElement : '.js-' + sTarget.split('.')[1],
                                            pushElement : sTarget
                                        };
                                    Util.def(_this.heightmatch.matchCommonOpts, personOpts);
                                    _this.heightmatch.instance.push(new HeightMatch(_this.carouselWrapper, _this.heightmatch.matchCommonOpts));
                                })(i);
                            }
                        }, this)
                    }
                });
                this.heightmatch.build();
            },
            changeEvents : function (event) {
                var events = [],
                    eventNames = event.split(' ');
                for (var key in eventNames) {
                    events.push(eventNames[key] + this.opts.customEvent);
                }
                return events.join(' ');
            },
            bindEvents : function (type) {
                if (type) {
                    this.tabItem.on(this.changeEvents('mouseenter mouseleave focusin'), $.proxy(this.onHoverFunc, this));
                    $(win).on(this.changeEvents('resize orientationchange'), $.proxy(this.resizeFunc, this));
                } else {
                    this.tabItem.off(this.changeEvents('mouseenter'));
                    $(win).off(this.changeEvents('resize orientationchange'));
                }
                this.carCategoryButton.on(this.changeEvents('click'), $.proxy(this.categoryButtonClick, this));
                this.tabBtns.on(this.changeEvents('click'), $.proxy(this.tabBtnClick, this));
            },
            onHoverFunc : function (e) {
                e.stopPropagation();
                var _target = $(e.currentTarget);
                var hoverClass = this.opts.classAttr.hover;
                if (e.type === 'mouseenter' || e.type === 'focusin') {
                    if (_target.hasClass(hoverClass)) return;
                    _target.addClass(hoverClass);
                    win.setTimeout($.proxy(function () {
                        _target.on('clickoutside touchendoutside keyupoutside', $.proxy(function () {
                            _target.trigger('mouseleave');
                        }, this));
                    }, this), 30);
                } else if (e.type === 'mouseleave') {
                    _target.off('clickoutside touchendoutside keyupoutside');
                    if (!_target.hasClass(hoverClass)) return;
                    _target.removeClass(hoverClass);
                }
            },
            categoryButtonClick : function (e) {
                var thisVal = $(e.currentTarget).attr("value"),
                    slideObj = $(e.currentTarget).parents('.cp-lineup-thumb-category__inner'),
                    mobileSelectObj = slideObj.find('.js-select-wrap'),
                    uio = slideObj.find('.thumb-uio');

                slideObj.find('.cp-lineup-thumb-category__tab').css('display', 'none');
                slideObj.find('.cp-lineup-thumb-category__tab').find('.cp-lineup-thumb-category__tab-title').css('height', '0px'); // 슬라이드가 보이지 않을 시 기본 설정 유지
                slideObj.find('.cp-lineup-thumb-category__tab[data-slide="'+ thisVal +'"]').css('display', 'block');
                slideObj.find('.cp-lineup-thumb-category__tab[data-slide="'+ thisVal +'"]').find('.cp-lineup-thumb-category__tab-title').removeAttr('style');
                if(mobileSelectObj.length){
                    // select hide action
                    mobileSelectObj.find('.cm-select__options').stop().hide();
                    mobileSelectObj.removeClass('is-opened');
                    mobileSelectObj.css('outline', '');
                    mobileSelectObj.attr('tabIndex', '');
                    mobileSelectObj.find('.cm-select__placeholder').attr('aria-expanded', 'false');
                    mobileSelectObj.off('clickoutside focusoutside');
                    
                    // uio slide action
                    uio.find('.tab-btn[data-tabtarget-name='+ thisVal +']').trigger('click');
                    if(uio.find('.swiper-slide').length > this.opts.carouselOpts.slidesPerView){
                        var clickLoop = '';
                        if($(e.currentTarget).index() > this.opts.currentIdx){
                            if($(e.currentTarget).index() >= 3){
                                if(this.opts.currentIdx == 0){
                                    clickLoop = $(e.currentTarget).index() - 3;
                                }else{
                                    clickLoop = $(e.currentTarget).index() - uio.find('.is-active').index() - 3;
                                };
                                for( let i = 0 ; i <= clickLoop ; i++ ){
                                    uio.find('.swiper-button-next > button').eq(0).delay(100).trigger('click');
                                };
                            };
                        }else if($(e.currentTarget).index() < this.opts.currentIdx){
                            if($(e.currentTarget).index() < $(e.currentTarget).siblings().length - 2){
                                //clickLoop = Math.abs($(e.currentTarget).index() - (this.opts.currentIdx - 3));
                                clickLoop = uio.find('.is-active').index() - ($(e.currentTarget).index() + 1);

                                for( let i = 0 ; i <= clickLoop ; i++ ){
                                    uio.find('.swiper-button-prev > button').eq(0).delay(100).trigger('click');
                                };
                            };
                        };
                        this.opts.currentIdx = $(e.currentTarget).index();
                    };
                };
            },
            resizeFunc : function () {
                this.winWidth = Util.winSize().w;
                if(!this.obj.hasClass(this.opts.classAttr.refresh)){
                    if (this.opts.resizeStart == null) {
                        this.opts.resizeStart = this.winWidth;
                        this.resizeAnimateFunc();
                    }
                    win.clearTimeout(this.resizeEndTime);
                    this.resizeEndTime = win.setTimeout($.proxy(this.resizeEndFunc, this), 50);
                    this.obj.addClass(this.opts.classAttr.refresh);
                };
            },
            resizeEndFunc : function () {
                this.opts.resizeStart = null;
                Util.cancelAFrame.call(win, this.resizeRequestFrame);
            },
            resizeAnimateFunc : function () {
                this.setLayout();
                this.resizeRequestFrame = Util.requestAFrame.call(win, $.proxy(this.resizeAnimateFunc, this));
            },
            setLayout : function () {
                this.opts.sizeAttr.swiper = RESPONSIVE.MOBILE.WIDTH;
                this.refreshCarousel();
            },
            buildCarouselCommon : function () {
                Util.def(this, {
                    carousel : {
                        instance : null,
                        updateAutoHeight : $.proxy(function (speed) {
                            if (this.carousel.instance == null) return;
                            this.carousel.instance.updateAutoHeight(speed);
                        }, this),
                        destroy : $.proxy(function () {
                            if (this.carousel.instance == null) return;
                            this.carousel.instance.destroy(true, true);
                            this.carousel.instance = null;
                        }, this)
                    }
                })
            },
            refreshCarousel : function () {
                var swiperSize = 768;
                var carouselOpts = Util.def({}, this.opts.carouselOpts);
                var breakpointsOpts = carouselOpts.breakpoints;
                delete carouselOpts.breakpoints;
                var customOpts = Util.def(carouselOpts, breakpointsOpts[swiperSize]);
                this.destroyCarousel();
                this.buildCarousel(customOpts);
            },
            buildCarousel : function (carouselOpts) {
                if (this.carousel.instance == null) {
                    this.carousel.instance = new HiveSwiper(this.obj, carouselOpts);
                }
            },
            destroyCarousel : function () {
                this.carousel.destroy();
            },
            updateHeightCarousel : function (speed) {
                this.carousel.updateAutoHeight(speed);
            },
            //uio tab part
            buildData : function () {
                for (var tbMin = 0, tbMax = this.tabBtns.length; tbMin < tbMax; tbMin++) {
                    var _tabBtn = this.tabBtns.eq(tbMin),
                        _tabBtnName = _tabBtn.attr('data-tabtarget-name'),
                        _tabCont = this.cmTabItem.filter('[data-tabtarget="' + _tabBtnName  +'"]'),
                        _tabVideo = _tabCont.find('.video-container');
                    this.opts.tabs[tbMin] = {
                        tab : _tabBtn,
                        activeTab : _tabBtn.closest('li'),
                        tabCont : _tabCont,
                        tabVideo : _tabVideo.length ? _tabVideo : null
                    }
                }
            },
            initLayout : function () {
                var _this = this,
                    _activeTabBtn = this.tabBtns.filter(function () {
                        var _target = $(this);
                        return $(this).closest('li').hasClass(_this.opts.activeClass);
                    }),
                    _activeIndex = this.tabBtns.index(_activeTabBtn),
                    _index = _activeIndex < 0 ? 0 : _activeIndex;
                for (var tbMin = 0, tbMax = this.opts.tabs.length; tbMin < tbMax; tbMin++) {
                    (function (index) {
                        var tab = _this.opts.tabs[index];
                        if (_index == index) {
                            tab.activeTab.addClass(_this.opts.activeClass);
                            tab.activeTab.find(_this.opts.tabLineInner).css('width', '100%');
                            tab.tabCont.addClass(_this.opts.activeClass).css('display', '');
                        } else {
                            tab.activeTab.removeClass(_this.opts.activeClass);
                            tab.activeTab.find(_this.opts.tabLineInner).css('width', 0);
                            tab.tabCont.removeClass(_this.opts.activeClass).hide();
                            if (tab.tabVideo !== null) {
                                tab.tabVideo.attr('data-use-scrollmagic', 'false');
                            }
                        }
                    })(tbMin);
                }
                this.opts.currentIndex = _index;
            },
            bindCallbackEvents : function () {
                this.obj.on(this.changeEvents('hiveTabReset'), $.proxy(function () {
                    this.opts.currentIndex = null;
                    this.cmTabBtnChild.removeClass(this.opts.activeClass);
                    this.cmTabItem.removeClass(this.opts.activeClass);
                    this.initLayout();
                }, this));
            },
            barAnimate : function (index) {
                var tabBtns = this.tabBtns,
                    range = Math.abs(this.opts.currentIndex - index),
                    devide = 100 / range,
                    props = [];
                if (this.opts.currentIndex < index) {
                    for (var cMin = this.opts.currentIndex, cMax = index; cMin <= cMax; cMin++) {
                        var index = props.length,
                            tabBtn = tabBtns.eq(cMin);
                        if (index == 0) {
                            props.push({
                                'TARGET' : tabBtn,
                                'INDEX' : cMin
                            });
                        } else {
                            props.push({
                                'TARGET' : tabBtn,
                                'INDEX' : cMin,
                                'MIN' : (index - 1) * devide,
                                'MAX' : index * devide,
                                'PROGRESS' : 0
                            });
                        }
                    }
                } else if (this.opts.currentIndex > index) {
                    for (var cMax = this.opts.currentIndex, cMin = index; cMin <= cMax; cMax--) {
                        var index = props.length,
                            tabBtn = tabBtns.eq(cMax);
                        if (index == 0) {
                            props.push({
                                'TARGET' : tabBtn,
                                'INDEX' : cMax
                            });
                        } else {
                            props.push({
                                'TARGET' : tabBtn,
                                'INDEX' : cMax,
                                'MIN' : (index - 1) * devide,
                                'MAX' : index * devide,
                                'PROGRESS' : 0
                            });
                        }
                    }
                }
                var demo = {score:0};
                TweenLite.to(demo, (((this.opts.duration * 2) - 30) / 1000), {
                    score : 100,
                    onUpdate : $.proxy(function () {
                        var score = demo.score;
                        for (var pMin = 1, pMax = props.length; pMin < pMax; pMin++) {
                            var prop = props[pMin],
                                prevIndex = pMin - 1,
                                prevProp = props[prevIndex];
                            if (prop['MIN'] < score && prop['MAX'] >= score) {
                                var percent = ((score - prop['MIN']) / (prop['MAX'] - prop['MIN'])) * 100;
                                if (prop['PROGRESS'] == 0) {
                                    if (prop['INDEX'] > prevProp['INDEX']) {
                                        prevProp['TARGET'].closest('li').addClass(this.opts.rightClass);
                                        prop['TARGET'].closest('li').removeClass(this.opts.rightClass);
                                    } else {
                                        prevProp['TARGET'].closest('li').removeClass(this.opts.rightClass);
                                        prop['TARGET'].closest('li').addClass(this.opts.rightClass);
                                    }
                                    prevProp['TARGET'].find(this.opts.tabLineInner).css('width', '100%');
                                    if (pMin >= 2) {
                                        props[pMin - 2]['TARGET'].find(this.opts.tabLineInner).css('width', 0);
                                    }
                                } else {
                                    prevProp['TARGET'].find(this.opts.tabLineInner).css('width', (100 - percent) + '%');
                                }
                                prop['TARGET'].find(this.opts.tabLineInner).css('width', percent + '%');
                                prop['PROGRESS']++;
                            }
                        }
                    }, this)
                });
            },
            contAnimate : function (type, callback) {
                var _this = this;
                var cmTabContents = this.cmTabContent,
                    cb = (callback || function () {});
                if (type) {
                    for (var ctMin = 0, ctMax = cmTabContents.length; ctMin < ctMax; ctMin++) {
                        (function (index) {
                            var cmTabContent = cmTabContents.eq(index),
                                cmTabActiveItem = cmTabContent.find(_this.opts.cmTabItem).filter('.' + _this.opts.activeClass);
                            var currentHeight = Util.getBoundingClientRect(cmTabContent).height;
                            var targetHeight = Util.getBoundingClientRect(cmTabActiveItem).height;
                            var completeFunc = $.proxy(function () {
                                cmTabContent.stop().css('height', '');
                                if (index == (ctMax - 1)) {
                                    cb();
                                }
                            }, _this);
                            if (currentHeight == targetHeight) {
                                completeFunc();
                            } else {
                                TweenLite.to(cmTabContent, (250 / 1000), {
                                    height: targetHeight,
                                    onComplete : $.proxy(function () {
                                        completeFunc();
                                    }, _this)
                                });
                            }
                        })(ctMin);
                    }
                } else {
                    for (var ctMin = 0, ctMax = cmTabContents.length; ctMin < ctMax; ctMin++) {
                        var cmTabContent = cmTabContents.eq(ctMin),
                            cmTabActiveItem = cmTabContent.find(_this.opts.cmTabItem).filter('.' + _this.opts.activeClass);
                        cmTabContent.css('height', Util.getBoundingClientRect(cmTabActiveItem).height);
                    }
                    cb();
                }
            },
            tabBtnClick : function (e) {
                e.preventDefault();
                var _this = this;
                var tabs = this.opts.tabs,
                    _tabBtn = $(e.currentTarget),
                    _index = this.tabBtns.index(_tabBtn),
                    _activeFunc = $.proxy(function (oldIndex) {
                        TweenLite.fromTo(tabs[_index].tabCont, (this.opts.duration / 1000), {
                            opacity : 0
                        },{
                            opacity : 1,
                            display : 'block',
                            onComplete : $.proxy(function () {
                                if (tabs[_index].tabVideo !== null) {
                                    tabs[_index].tabVideo.attr('data-use-scrollmagic', 'true');
                                    tabs[_index].tabVideo.trigger('hiveVideoPlay');
                                }
                                if (oldIndex !== null && tabs[oldIndex].tabVideo !== null) {
                                    tabs[oldIndex].tabVideo.attr('data-use-scrollmagic', 'false');
                                    tabs[oldIndex].tabVideo.trigger('hiveVideoPause');
                                    if (tabs[oldIndex].tabVideo.hasClass('is-ended')) {
                                        tabs[oldIndex].tabVideo.trigger('hiveVideoSetTime', 0);
                                    }
                                }
                            }, this)
                        });
                        win.setTimeout($.proxy(function () {
                            var allLoadFunc = $.proxy(function () {
                                this.contAnimate(true, $.proxy(function () {
                                    win.G2.page.stickyReposition();
                                    this.outCallback('complete');
                                }, this));
                            }, this);
                            this.opts.animating = false;
                            if (tabs[_index].tabVideo !== null) {
                                var videoNotLoadeds = tabs[_index].tabVideo.not('[data-video-loaded="true"]'),
                                    videoLoadRank = 0;
                                if (videoNotLoadeds.length) {
                                    for (var vnMin = 0, vnMax = videoNotLoadeds.length; vnMin < vnMax; vnMin++) {
                                        (function (vIndex) {
                                            var videoNotLoaded = videoNotLoadeds.eq(vIndex);
                                            videoNotLoaded.on('videoLoaded', $.proxy(function () {
                                                videoLoadRank++;
                                                if (videoLoadRank == vnMax) {
                                                    allLoadFunc();
                                                }
                                            }, _this));
                                        })(vnMin);
                                    }
                                } else {
                                    allLoadFunc();
                                }
                            } else {
                                allLoadFunc();
                            }
                        }, this), this.opts.duration);
                        this.obj.trigger('hiveTabStart', this);
                    }, this);
                if (this.opts.currentIndex === _index || this.opts.animating) return;
                this.opts.animating = true;
                this.barAnimate(_index);
                this.contAnimate(false);
                tabs[_index].activeTab.addClass(this.opts.activeClass);
                tabs[_index].tabCont.addClass(this.opts.activeClass);
                if (this.opts.currentIndex !== null) {
                    var oldIndex = this.opts.currentIndex;
                    tabs[this.opts.currentIndex].activeTab.removeClass(this.opts.activeClass);
                    tabs[this.opts.currentIndex].tabCont.removeClass(this.opts.activeClass);
                    TweenLite.fromTo(tabs[this.opts.currentIndex].tabCont, (this.opts.duration / 1000), {
                        opacity : 1,
                        display : 'block'
                    }, {
                        opacity : 0,
                        display : 'none'
                    });
                    win.setTimeout(function () {
                        _activeFunc(oldIndex);
                    }, this.opts.duration);
                } else {
                    _activeFunc(null);
                }
                this.opts.currentIndex = _index;

                var thisVal = $(e.currentTarget).attr("data-tabtarget-name"),
                    slideObj = $(e.currentTarget).parents('.cp-lineup-thumb-category__inner'),
                    mobileSelectObj = slideObj.find('.js-select-wrap');
                mobileSelectObj.find('.cm-select__options > ul > li[value=' + thisVal + ']').trigger('click');
                mobileSelectObj.find('.cm-select__placeholder > span:eq(0)').text(thisVal);
            },
            outCallback : function (ing, data) {
                var callbackObj = this.opts.on[ing];
                if (callbackObj == null) return;
                callbackObj(data);
            },
            //common part
            reInit : function (e) {
                // Global Callback
            }
        };

        return Component;
    })();
    return Component;

}));

(function (global, factory) {
    $(function () {
        factory();
    });
}(this, function () { 'use strict';

    var Component = (function (isUndefined) {
        var win = window,
            $ = win.jQuery,
            Util = win.G2.util;
        function Component (args) {
            var defParams = {
                obj : '.thumb-uio'
            };
            this.opts = Util.def(defParams, (args || {}));
            if (!(this.obj = $(this.opts.obj)).length) return;
            this.init();
        }
        Component.prototype = {
            init : function () {
                this.callComponent();
            },
            callComponent : function () {
                for (var i = 0, max = this.obj.length; i < max; i++) {
                    new win.g2.vehicleLineupUio.Component(this.obj.eq(i));
                }
            }
        };
        return new Component();
    })();
    return Component;

}));
// [제네시스] 차량 카테고리 개편 End
$(function(){  
	
    $('.cp-lineup-thumb-category__tab').eq(0).show();
    
});


